import 'dart:async';

import 'package:bloc_test/bloc_test.dart';
import 'package:news_app/application/playground/counter_cubit/counter_cubit.dart';
import 'package:test/test.dart';

// Mock Cubit
class MockCounterCubit extends MockCubit<int> implements CounterCubit {}

void main() {
  mainCubit();
}

void mainCubit() {
  group('whenListen', () {
    test("Let's mock the CounterCubit's stream!", () {
      final cubit = MockCounterCubit();
      whenListen(cubit, Stream.fromIterable([0, 1, 2, 3]));
      expectLater(cubit.stream, emitsInOrder(<int>[0, 1, 2, 3]));
    });
  });

  group('CounterCubit', () {
    blocTest<CounterCubit, int>(
      'emits [] when nothing is called',
      build: () => CounterCubit(),
      expect: () => const <int>[],
    );

    blocTest<CounterCubit, int>(
      'emits [1] when increment is called',
      build: () => CounterCubit(),
      act: (cubit) => cubit.increment(),
      expect: () => const <int>[1],
    );

    blocTest<CounterCubit, int>(
      'emits [-1] when decrement is called',
      build: () => CounterCubit(),
      act: (cubit) => cubit.decrement(),
      expect: () => const <int>[-1],
    );
  });
}
